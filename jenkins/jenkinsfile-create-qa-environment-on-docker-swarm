pipeline {
    agent { label "master" }
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()
        APP_NAME="petclinic"
        APP_STACK_NAME="siberblog-$APP_NAME-App-QA-${BUILD_NUMBER}"
        AWS_REGION="us-east-1"
        CFN_KEYPAIR="siberblog-${APP_NAME}-qa.key"
        CFN_TEMPLATE="./infrastructure/qa-docker-swarm-infrastructure-cfn-template.yml"
        ANSIBLE_PRIVATE_KEY_FILE="${JENKINS_HOME}/.ssh/${CFN_KEYPAIR}"
        ANSIBLE_HOST_KEY_CHECKING="False"
    }
    stages {
        stage('1-Create QA Environment Infrastructure') {
            steps {
                echo 'Creating Infrastructure for QA Environment with Cloudfomation'
                sh "aws cloudformation create-stack --region ${AWS_REGION} --stack-name ${APP_STACK_NAME} --capabilities CAPABILITY_IAM --template-body file://${CFN_TEMPLATE} --parameters ParameterKey=KeyPairName,ParameterValue=${CFN_KEYPAIR}"
            }
        }

        stage('2-Wait for accessibility to the all servers') {
            parallel {
                stage('Docker Grand Master') {
                    steps {
                        script {
                            while(true) {
                                ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=grand-master Name=tag-value,Values=${APP_STACK_NAME} --query Reservations[*].Instances[*].[PublicIpAddress] --output text", returnStdout:true).trim()
                                if (ip.length() >= 7) {
                                    echo "Docker Swarm Grand MAster Public Ip Address Found: $ip"
                                    env.GRAND_MASTER_PUBLIC_IP = "$ip"
                                    break
                                }
                                sleep(3)
                            }
                        }
                    }
                }

                stage('Swarm Docker Manager-1') {
                    steps {
                        script {
                            while(true) {
                                ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=docker-instance-2 Name=tag-value,Values=${APP_STACK_NAME} --query Reservations[*].Instances[*].[PublicIpAddress] --output text", returnStdout:true).trim()
                                if (ip.length() >= 7) {
                                    echo "Docker Swarm Manager-1 Public Ip Address Found: $ip"
                                    env.MANAGER1_PUBLIC_IP = "$ip"
                                    break
                                }
                                sleep(3)
                            }
                        }
                    }
                }

                stage('Swarm Docker Manager-2') {
                    steps {
                        script {
                            while(true) {
                                ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=docker-instance-3 Name=tag-value,Values=${APP_STACK_NAME} --query Reservations[*].Instances[*].[PublicIpAddress] --output text", returnStdout:true).trim()
                                if (ip.length() >= 7) {
                                    echo "Docker Swarm Manager-2 Public Ip Address Found: $ip"
                                    env.MANAGER2_PUBLIC_IP = "$ip"
                                    break
                                }
                                sleep(3)
                            }
                        }
                    }
                }

                stage('Swarm Docker Worker-1') {
                    steps {
                        script {
                            while(true) {
                                ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=docker-instance-4 Name=tag-value,Values=${APP_STACK_NAME} --query Reservations[*].Instances[*].[PublicIpAddress] --output text", returnStdout:true).trim()
                                if (ip.length() >= 7) {
                                    echo "Docker Swarm Worker-1 Public Ip Address Found: $ip"
                                    env.WORKER1_PUBLIC_IP = "$ip"
                                    break
                                }
                                sleep(3)
                            }
                        }
                    }
                }

                stage('Swarm Docker Worker-2') {
                    steps {
                        script {
                            while(true) {
                                ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=docker-instance-5 Name=tag-value,Values=${APP_STACK_NAME} --query Reservations[*].Instances[*].[PublicIpAddress] --output text", returnStdout:true).trim()
                                if (ip.length() >= 7) {
                                    echo "Docker Swarm Worker-2 Public Ip Address Found: $ip"
                                    env.WORKER2_PUBLIC_IP = "$ip"
                                    break
                                }
                                sleep(3)
                            }
                        }

                        
                    }
                }

                stage('SSH Connection Test') {
                    steps {
                        script {
                            while(true) {
                                try{
                                    sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ec2-user@${GRAND_MASTER_PUBLIC_IP} hostname"
                                    echo "Docker Grand Master is reachable with SSH."
                                    break
                                }
                                catch(Exception){
                                    echo "Could not connect to Docker Grand Master with SSH, I will try again in 10 seconds"
                                    sleep(10)
                                }
                            }

                            while(true) {
                                try{
                                    sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ec2-user@${MANAGER1_PUBLIC_IP} hostname"
                                    echo "Docker Swarm Manager-1 is reachable with SSH."
                                    break
                                }
                                catch(Exception){
                                    echo "Could not connect to Docker Swarm Manager-1 with SSH, I will try again in 10 seconds"
                                    sleep(10)
                                }
                            }
                            while(true) {
                                try{
                                    sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ec2-user@${MANAGER2_PUBLIC_IP} hostname"
                                    echo "Docker Swarm Manager-2 is reachable with SSH."
                                    break
                                }
                                catch(Exception){
                                    echo "Could not connect to Docker Swarm Manager-2 with SSH, I will try again in 10 seconds"
                                    sleep(10)
                                }
                            }

                            while(true) {
                                try{
                                    sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ec2-user@${WORKER1_PUBLIC_IP} hostname"
                                    echo "Docker Swarm Worker-1 is reachable with SSH."
                                    break
                                }
                                catch(Exception){
                                    echo "Could not connect to Docker Swarm Worker-1 with SSH, I will try again in 10 seconds"
                                    sleep(10)
                                }
                            }

                            while(true) {
                                try{
                                    sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ec2-user@${WORKER2_PUBLIC_IP} hostname"
                                    echo "Docker Swarm Worker-2 is reachable with SSH."
                                    break
                                }
                                catch(Exception){
                                    echo "Could not connect to Docker Swarm Worker-2 with SSH, I will try again in 10 seconds"
                                    sleep(10)
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('3-Create Docker Swarm for QA Environment') {
            steps {
                echo "Setup Docker Swarm for QA Environment for ${APP_NAME} App"
                echo "Update dynamic environment"
                sh "sed -i 's/APP_STACK_NAME/${APP_STACK_NAME}/' ./ansible/inventory/qa_stack_dynamic_inventory_aws_ec2.yaml"
                echo "Swarm Setup for all nodes (instances)"
                sh "ansible-playbook -i ./ansible/inventory/qa_stack_dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/pb_setup_for_all_docker_swarm_instances.yaml"
                echo "Swarm Setup for Grand Master node"
                sh "ansible-playbook -i ./ansible/inventory/qa_stack_dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/pb_initialize_docker_swarm.yaml"
                echo "Swarm Setup for Other Managers nodes"
                sh "ansible-playbook -i ./ansible/inventory/qa_stack_dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/pb_join_docker_swarm_managers.yaml"
                echo "Swarm Setup for Workers nodes"
                sh "ansible-playbook -i ./ansible/inventory/qa_stack_dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/pb_join_docker_swarm_workers.yaml"
            }
        }
    }
    post {
        failure {
            echo 'Tear down the Docker Swarm infrastructure using AWS CLI'
            sh "aws cloudformation delete-stack --region ${AWS_REGION} --stack-name ${APP_STACK_NAME}"
        }
    }
}